import React, { Component } from "react";
import { ProgressBar } from "react-bootstrap";
import SpotifyWebApi from "spotify-web-api-js";
import $ from "jquery";
const spotifyApi = new SpotifyWebApi();

class Lyrics extends Component {
  constructor() {
    super();
    const params = this.getHashParams();
    const token = params.access_token;
    if (token) {
      spotifyApi.setAccessToken(token);
    }
    this.state = {
      loggedIn: token ? true : false,
      nowPlaying: {
        name: "Nothing is playing",
        albumArt: "",
        lyrics: [],
        time_left: 0,
        total_time: 0
      }
    };
    console.log(params);
  }
  getHashParams() {
    var hashParams = {};
    var e,
      r = /([^&;=]+)=?([^&;]*)/g,
      q = window.location.hash.substring(1);
    e = r.exec(q);
    while (e) {
      hashParams[e[1]] = decodeURIComponent(e[2]);
      e = r.exec(q);
    }
    return hashParams;
  }
  hasChanged() {
    spotifyApi.getMyCurrentPlaybackState().then(response => {
      if (response.is_playing) {
        console.log(response);
        console.log(response.item.name);
        console.log(this.state.nowPlaying.name);
        if (
          response.item.name.valueOf() !== this.state.nowPlaying.name.valueOf()
        ) {
          this.getNowPlaying();
          this.setState({
            nowPlaying: {
              name: response.item.name,
              artist: response.item.artists[0].name,
              albumArt:
                typeof response.item.album === "undefined"
                  ? response.item.album.images[0].url
                  : "",
              total_time: response.item.duration_ms,
              time_left: response.item.duration_ms - response.progress_ms,
              lyrics: []
            }
          });
        } else {
          const { name, artist, total_time, lyrics } = this.state.nowPlaying;
          this.setState({
            nowPlaying: {
              name: name,
              artist: artist,
              albumArt:
                typeof response.item.album !== "undefined"
                  ? response.item.album.images[0].url
                  : "",
              total_time: total_time,
              time_left: response.item.duration_ms - response.progress_ms,
              lyrics: lyrics
            }
          });
        }
      } else {
        const { artist, albumArt, total_time, lyrics } = this.state.nowPlaying;
        this.setState({
          nowPlaying: {
            name: "Nothing is Playing",
            artist: artist,
            albumArt: albumArt,
            total_time: total_time,
            time_left: 0,
            lyrics: lyrics
          }
        });
      }
    });
  }
  componentDidMount() {
    this.interval = setInterval(() => this.hasChanged(), 3000);
    $(document).on("mousemove", function(e) {
      $(".light").css({
        left: e.pageX - 300,
        top: e.pageY - 300
      });
    });

    var el = $(".js-tilt-container");

    el.on("mousemove", function(e) {
      var _$$offset = $(this).offset(),
        left = _$$offset.left,
        top = _$$offset.top;
      var cursPosX = e.pageX - left;
      var cursPosY = e.pageY - top;
      var cursFromCenterX = $(this).width() / 2 - cursPosX;
      var cursFromCenterY = $(this).height() / 2 - cursPosY;

      $(this).css(
        "transform",
        "perspective(500px) rotateX(" +
          cursFromCenterY / 40 +
          "deg) rotateY(" +
          -(cursFromCenterX / 40) +
          "deg) translateZ(10px)"
      );

      var invertedX =
        Math.sign(cursFromCenterX) > 0
          ? -Math.abs(cursFromCenterX)
          : Math.abs(cursFromCenterX);

      //Parallax transform on image
      $(this)
        .find(".js-perspective-neg")
        .css(
          "transform",
          "translateY(" +
            cursFromCenterY / 10 +
            "px) translateX(" +
            -(invertedX / 10) +
            "px) scale(1.15)"
        );

      $(this).removeClass("leave");
    });

    el.on("mouseleave", function() {
      $(this).addClass("leave");
    });
  }

  componentWillUnmount() {
    clearInterval(this.interval);
  }

  getNowPlaying() {
    spotifyApi
      .getMyCurrentPlaybackState()
      .then(response => {
        var artist = response.item.artists[0].name.replace(/[^\w\s]/g, "");
        if (response.item.artists[1]) {
          artist =
            artist +
            " " +
            response.item.artists[1].name.replace(/[^\w\s]/g, "");
        }
        console.log(response);
        console.log(artist);
        var song_name = response.item.name.split("(")[0];
        console.log(song_name);
        song_name = response.item.name.replace(/[^\w\s]/g, "");
        song_name = song_name.split(" ");
        song_name = song_name.slice(0, 5);
        song_name = song_name.join("%20");
        song_name = song_name.replace(",", "%20");
        console.log(song_name);
        var url =
          "http://ariczhuang.ddns.net:8888/get_lyrics/?artist=" +
          song_name +
          "&name=" +
          artist.replace(" ", "%20");
        fetch(url)
          .then(data => data.json())
          .then(data => {
            var parsed = data.lyrics.song_lyrics.split("\n");

            this.setState({
              nowPlaying: {
                name: response.item.name,
                artist: response.item.artists[0].name,
                albumArt:
                  typeof response.item.album !== "undefined"
                    ? response.item.album.images[0].url
                    : "",
                total_time: response.item.duration_ms,
                time_left: response.item.duration_ms - response.progress_ms,
                lyrics: parsed
              }
            });
          })
          .catch(err => console.log("lyrical error:" + err));
      })
      .catch(err => console.log("There was an error:" + err));
  }

  render() {
    const lyrics = this.state.nowPlaying.lyrics.map(item =>
      item === "" ? (
        <br key={item.uniqueId} />
      ) : (
        <div key={item.uniqueId}>{item}</div>
      )
    );
    return (
      <div className="Lyrics">
        {this.state.loggedIn && (
          <React.Fragment>
            {" "}
            <input
              id="mycheckbox"
              onClick={() => this.getNowPlaying()}
              type="checkbox"
            />
            <label htmlFor="mycheckbox" />
          </React.Fragment>
        )}
        {!this.state.loggedIn && (
          <a href="http://arcizhuang.ddns.net:8888/login">Connect your Spotify</a>
        )}
        <div>
          {this.state.nowPlaying.name}
          <div style={{ width: "300px", margin: "auto" }}>
            <ProgressBar
              active
              striped
              bsStyle="info"
              now={Math.floor(
                (1 -
                  this.state.nowPlaying.time_left /
                    this.state.nowPlaying.total_time) *
                  100
              )}
            />
          </div>
        </div>
        <div>
          <div
            className="image-shadow js-tilt-container"
            style={{
              backgroundImage: "url(" + this.state.nowPlaying.albumArt + ")"
            }}
          >
            <br />
            <br />
          </div>
        </div>
        <div>Lyrics: {lyrics}</div>
        <br />
      </div>
    );
  }
}

export default Lyrics;
